const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

app.use(bodyParser.json());

mongoose.connect('mongodb://localhost:27017/blog-api', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const User = mongoose.model('User', {
  name: String,
  email: String,
});

const Blog = mongoose.model('Blog', {
  title: String,
  content: String,
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
});

const Comment = mongoose.model('Comment', {
  content: String,
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  blog: { type: mongoose.Schema.Types.ObjectId, ref: 'Blog' },
});

app.post('/users', async (req, res) => {
  try {
    const user = new User(req.body);
    await user.save();
    res.json(user);
  } catch (error) {
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.post('/blogs', async (req, res) => {
  try {
    const blog = new Blog(req.body);
    await blog.save();
    res.json(blog);
  } catch (error) {
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.post('/comments', async (req, res) => {
  try {
    const comment = new Comment(req.body);
    await comment.save();
    res.json(comment);
  } catch (error) {
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

app.get('/blogs/:userId', async (req, res) => {
  try {
    const userId = req.params.userId;
    const blogs = await Blog.find({ author: userId }).populate('author');
    res.json(blogs);
  } catch (error) {
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

const readme = `
# Blogging API

## Setup
1. Install dependencies: \`npm install\`
2. Start the server: \`npm start\`

## API Endpoints

### Users
- POST /users
  - Create a new user
  - Request body: { "name": "John Doe", "email": "john@example.com" }

### Blogs
- POST /blogs
  - Create a new blog
  - Request body: { "title": "My Blog", "content": "Blog content", "author": "userId" }

- GET /blogs/:userId
  - Get all blogs by a user

### Comments
- POST /comments
  - Create a new comment
  - Request body: { "content": "Comment content", "user": "userId", "blog": "blogId" }
`;

app.get('/', (req, res) => res.send(readme));

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
